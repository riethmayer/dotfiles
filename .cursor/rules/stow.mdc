---
description: Rules for managing dotfiles with stow, including directory structure, bootstrap process, and configuration organization
globs: ["stow/**/*", ".stow-global-ignore"]
alwaysApply: true
---

# Stow Structure and Usage
- Use `stow` to create and manage symbolic links for all configuration files
- Each tool or language should have its own stow directory (e.g., `stow/zsh/`, `stow/git/`)
- Follow the principle: one tool/language = one stow directory

# Bootstrap Process
- All system setup must be automated through `make bootstrap`
- Bootstrap scripts must install dependencies in the correct order
- After `make bootstrap`, `make install-adopt` should create all stow links
- Example order: Homebrew → GPG → mise → language tools

# Bootstrap Scripts Organization
- All bootstrap scripts must be in `stow/bootstrap/.system-bootstrap.d/`
- Each script should be named with a number prefix for ordering (e.g., `001_homebrew.sh`)
- No tool-specific bootstrap scripts outside this directory
- Purpose: Single source of truth for system setup

# Package Manager and Language Config Separation
- Package managers (mise, brew) handle only:
  - Version management
  - Installation
  - Tool-specific environment setup
- Language configurations stay in their own directories:
  - R configs in `stow/R/`
  - Ruby configs in `stow/ruby/`
  - Python configs in `stow/python/`
- Never mix these concerns (e.g., don't put .Rprofile in mise's config)

# Script Organization
- `stow/bootstrap/bin/` contains only `system-bootstrap.sh`
- All user-specific scripts go in `stow/scripts/bin/`
- Purpose: Clear separation between system setup and user tools

# XDG Standards
- Follow XDG Base Directory Specification:
  - Config files → `$XDG_CONFIG_HOME` (~/.config)
  - Data files → `$XDG_DATA_HOME` (~/.local/share)
  - State files → `$XDG_STATE_HOME` (~/.local/state)
  - Cache files → `$XDG_CACHE_HOME` (~/.cache)
- Refactor existing configs to follow these standards when possible
